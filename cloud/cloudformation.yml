AWSTemplateFormatVersion: 2010-09-09
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: $FRONTEND_BUCKET
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: $FRONTEND_BUCKET
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', $FRONTEND_BUCKET, '/*']]
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  # Cloudfront
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: SmartBerry Identity
  CloudfrontFrontend:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Frontend GERP
        HttpVersion: http2and3
        DefaultRootObject: index.html
        IPV6Enabled: true
        Origins:
        - DomainName: !Join ['', 
            ['$FRONTEND_BUCKET','.s3.',!Ref AWS::Region,'.amazonaws.com']
          ]
          Id: frontend
          S3OriginConfig:
            OriginAccessIdentity:
              !Join ['', [
                'origin-access-identity/cloudfront/', 
                !Ref CloudFrontOriginAccessIdentity
              ]]
        Enabled: true
        CacheBehaviors:
          - 
            AllowedMethods: [GET,HEAD]
            Compress: false
            PathPattern: "*.html"
            TargetOriginId: frontend
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #no-cache
          - 
            AllowedMethods: [GET,HEAD,OPTIONS]
            Compress: false
            PathPattern: "*.webmanifest"
            TargetOriginId: frontend
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #no-cache
          - 
            AllowedMethods: [GET,HEAD,OPTIONS]
            Compress: false
            PathPattern: "sw.js"
            TargetOriginId: frontend
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #no-cache
          - 
            AllowedMethods: [GET,HEAD,OPTIONS]
            Compress: false
            PathPattern: "registerSW.js"
            TargetOriginId: frontend
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #no-cache
        DefaultCacheBehavior:
          TargetOriginId: frontend
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: https-only
          Compress: true
        CustomErrorResponses:
          - 
            ErrorCode: 403
            ResponsePagePath: "/index.html"
            ErrorCachingMinTTL: 10
            ResponseCode: 200
          - 
            ErrorCode: 404
            ResponsePagePath: "/index.html"
            ErrorCachingMinTTL: 10
            ResponseCode: 200
  # Lambda en GO
  LambdaGO:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: $DEPLOYMENT_BUCKET
        S3Key: $S3_COMPILED_PATH
      Description: Lambda Berryweek on GO
      FunctionName: $LAMBDA_NAME
      Handler: index.handler
      MemorySize: 192
      Timeout: 300
      Architectures: [arm64]
      Role: $LAMBDA_IAM_ROLE
      Runtime: provided.al2
      Environment:
        APP_CODE: gerp-prd
  # Lambda Log Group
  LambdaGOLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/$LAMBDA_NAME
      RetentionInDays: 30
  # URL de la lambda
  LambdaGOFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref LambdaGO
      AuthType: NONE
      Cors:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - HEAD
          - PUT
  LambdaGOPermisionForURLInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaGO
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

  # Event Bridge para Lambda - GO
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: SmartBerry GO | Cron Job Event 10 min
      # EventBusName: !Ref EventBridgeEventBus
      ScheduleExpression: cron(*/10 * * * ? *)
      Name: $LAMBDA_NAME_cron_lambda_every_10_min_go
      State: ENABLED
      Targets:
      - Arn: !GetAtt LambdaGO.Arn
        Id: lambda-function
        Input: '{"body":"exec:cron"}'
  
  EventBridgeInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaGO
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRule.Arn

  # Tabla DynamoDB
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: $DYNAMODB_TABLE
      AttributeDefinitions:
        - AttributeName: "pk"  # primary key
          AttributeType: "S"
        - AttributeName: "sk"  # sort key
          AttributeType: "S"
        - AttributeName: "ix1" # index 1
          AttributeType: "S"
        - AttributeName: "ix2" # index 2
          AttributeType: "S"
        - AttributeName: "ix3" # index 3
          AttributeType: "S"
        - AttributeName: "ix4" # index 4
          AttributeType: "S"
        - AttributeName: "in5" # index 5 (numeric)
          AttributeType: "N"
      
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"

      GlobalSecondaryIndexes:
        - IndexName: ix1
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: ix1
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'
        - IndexName: ix2
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: ix2
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'   
        - IndexName: ix3
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: ix3
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'   
        - IndexName: ix4
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: ix4
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'   
        - IndexName: in5
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: in5
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'    
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      BillingMode: PAY_PER_REQUEST
Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3